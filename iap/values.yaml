# Copyright (c) 2024, Itential, Inc
# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)
---
# Default values for iap.

replicaCount: 3

# The Itential image to use, its version, and its location
image:
  repository: "itential.jfrog.io/itential-docker/automation-platform"
  name: "itential.jfrog.io/itential-docker/automation-platform"
  tag: "2023.2.7"
  pullPolicy: "IfNotPresent"

# The secrets object used to pull the image from the repo
imagePullSecrets:
  - name: "jfrogcred"

# This is used to configure the storage class object which governs
# how the mounted volumes are created.
storageClass:
  enabled: true
  name: "iap-ebs-gp3"
  provisioner: "ebs.csi.aws.com"
  reclaimPolicy: "Retain"
  volumeBindingMode: "WaitForFirstConsumer"
  parameters:
    type: "gp3"

# Persistent volumes and persitent volume claims. These are used for Itential
# application logs and for Itential adapters.
persistentVolumeClaims:
  # This represents the claim for the persistence for the adapters and other
  # custom applications that may have been developed by the customer.
  assetClaim:
    # The requested amount of storage
    storage: "10Gi"
  # This represents the claim for the persistence for the log files created and
  # written to by the IAP application
  logClaim:
    # The requested amount of storage
    storage: "10Gi"

# The Kubernetes service object for this application
service:
  # The service type
  type: "ClusterIP"
  # The name of this Kubernetes service object
  name: "iap-service"
  # The port that this service object is listening on
  port: 80
  # The application port that this service object will send requests to
  targetPort: 3000

# The Kubernetes ingress object for this application.
ingress:
  # enabled The ingress object can be disabled and will not be created with this set to false
  enabled: true
  # name The name of this Kubernetes ingress object
  name: "iap-ingress"
  # className The ingress controller class name
  className: "alb-public"
  # annotations The annotations for this ingress object. These are passed into the template
  # as is and will render as you see here.
  annotations:
    alb.ingress.kubernetes.io/backend-protocol: "HTTP"
    alb.ingress.kubernetes.io/healthcheck-path: "/health/status"
    alb.ingress.kubernetes.io/healthcheck-port: "3000"
    alb.ingress.kubernetes.io/healthcheck-protocol: "HTTP"
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS": 443}]'
    alb.ingress.kubernetes.io/target-group-attributes: "stickiness.enabled=true"
    alb.ingress.kubernetes.io/target-type: "ip"
  # hosts The list of hosts for this ingress and their associated properties
  hosts:
    - host: "iap.iap-dev.itential.io"
      paths:
        - path: "/"
          pathType: "Prefix"
  tls: []

statefulset:
  enabled: true

podAnnotations: {}
podLabels: {}
securityContext: {}

# The pods will mount some persistent volumes. These settings
# allow for that to happen.
podSecurityContext:
  fsGroup: 1001
  runAsUser: 1001
  runAsNonRoot: true

# Container resources
resources:
  limits:
    memory: "14Gi"
  requests:
    cpu: "3"
    memory: "14Gi"

# The liveness probe used to determine if the container is alive. If the liveness probe fails,
# the kubelet kills the container, and the container is subjected to its restart policy. If a
# container does not provide a liveness probe, the default state is Success.
livenessProbe:
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1
  httpGet:
    path: "/health/status"
    port: 3000

# The readiness probe used to determine if the container is ready to accept requests. If the
# readiness probe fails, the endpoints controller removes the podâ€™s IP address from the
# endpoints of all services that match the pod. The default state of readiness before the
# initial delay is failure. If a container does not provide a readiness probe, the default
# state is success.
readinessProbe:
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1
  httpGet:
    path: "/health/status"
    port: 3000

# The startup probe used to allow some time for the application to start up. The application
# will have a maximum of 3 minutes (18 * 10 = 180s) to finish its startup. Once the startup
# probe has succeeded once, the liveness probe takes over.
startupProbe:
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 18
  successThreshold: 1
  httpGet:
    path: "/health/status"
    port: 3000

# Configuration properties for Itential properties.json file. This is the main
# config file for the Itential application. This is used to populate a config map
# object which is then mounted as a file/volume.
configMap:
  enabled: true
  propertiesJson:
    profileId: "Local_AAA"
    dbAuth: false
    dbUsername: ""
    dbPassword: ""
    dbName: ""
    acceptInvalidCerts: true
    checkServerIdentity: false
    sslEnabled: true
    sslCA: ""
    sslValidate: false
    dbUrl: ""
    processJobsOnStart: true
    processTasksOnStart: true

# Additional volumes to output on the Statefulset definition.
volumes: []

# Additional volumeMounts to output on the Statefulset definition.
volumeMounts: []

nodeSelector:
  itential.io/role: "iap-p"

tolerations:
  - effect: "NoSchedule"
    key: "itential.io/role"
    operator: "Equal"
    value: "iap-p"

affinity: {}
